using System;
using System.Threading.Tasks;

using CMS.Websites;

using Kentico.Content.Web.Mvc;
using Kentico.Content.Web.Mvc.Routing;

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Extensions;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Mvc.ViewFeatures;
using Microsoft.AspNetCore.Razor.TagHelpers;
using Microsoft.AspNetCore.Routing;

namespace DancingGoat.Helpers
{
    public class LanguageLinkTagHelper : TagHelper
    {
        private readonly IHttpContextAccessor httpContextAccessor;
        private readonly IWebPageDataContextRetriever pageDataContextRetriever;
        private readonly IHtmlGenerator htmlGenerator;
        private readonly IWebPageUrlRetriever webPageUrlRetriever;
        private readonly IPreferredLanguageRetriever currentLanguageRetriever;
        private readonly ICurrentWebsiteChannelPrimaryLanguageRetriever websiteChannelPrimaryLanguageRetriever;


        public string LinkText { get; set; }


        public string LanguageName { get; set; }


        [ViewContext]
        [HtmlAttributeNotBound]
        public ViewContext ViewContext { get; set; }


        public LanguageLinkTagHelper(
            IHttpContextAccessor httpContextAccessor,
            IWebPageDataContextRetriever pageDataContextRetriever,
            IHtmlGenerator htmlGenerator,
            IWebPageUrlRetriever webPageUrlRetriever,
            IPreferredLanguageRetriever currentLanguageRetriever,
            ICurrentWebsiteChannelPrimaryLanguageRetriever websiteChannelPrimaryLanguageRetriever)
        {
            this.httpContextAccessor = httpContextAccessor;
            this.pageDataContextRetriever = pageDataContextRetriever;
            this.htmlGenerator = htmlGenerator;
            this.webPageUrlRetriever = webPageUrlRetriever;
            this.currentLanguageRetriever = currentLanguageRetriever;
            this.websiteChannelPrimaryLanguageRetriever = websiteChannelPrimaryLanguageRetriever;
        }


        public override async Task ProcessAsync(TagHelperContext context, TagHelperOutput output)
        {
            // Page data context is initialized
            if (pageDataContextRetriever.TryRetrieve(out var webPageContext))
            {
                var url = await webPageUrlRetriever.Retrieve(webPageContext.WebPage.WebPageItemID, LanguageName);

                CreateActionLinkWithHref(output, url.RelativePath);
                return;
            }

            var httpContext = httpContextAccessor.HttpContext;

            // Create a link for the current language (the URL stays as it is)
            if (currentLanguageRetriever.Get() == LanguageName)
            {
                var url = UriHelper.GetEncodedUrl(httpContext.Request);
                CreateActionLinkWithHref(output, url);
                return;
            }

            var originalRouteValues = httpContext.Request.RouteValues;

            // Clone the original route information
            var newRouteValues = new RouteValueDictionary(originalRouteValues);

            var queryParams = httpContext.Request.Query;

            // Add query parameters (e.g. when performing a search)
            foreach (var queryParam in queryParams)
            {
                var key = queryParam.Key;

                if (!string.IsNullOrEmpty(key))
                {
                    newRouteValues[key] = queryParams[key];
                }
            }

            output.TagName = null;
            var actionLink = await GenerateActionLink(newRouteValues);
            output.Content.SetHtmlContent(actionLink);
        }


        private void CreateActionLinkWithHref(TagHelperOutput output, string url)
        {
            output.TagName = "a";
            output.Attributes.Add("href", url);
            output.TagMode = TagMode.StartTagAndEndTag;
            output.Content.SetContent(LinkText);
        }


        private async Task<TagBuilder> GenerateActionLink(RouteValueDictionary routeValues)
        {
            // Link for the primary language needs to be generated by route name in order to not put language prefix into query string
            var websiteChannelPrimaryLanguage = await websiteChannelPrimaryLanguageRetriever.Get();

            if (string.Equals(LanguageName, websiteChannelPrimaryLanguage, StringComparison.InvariantCultureIgnoreCase))
            {
                routeValues.Remove(WebPageRoutingOptions.LANGUAGE_ROUTE_VALUE_KEY);
                return htmlGenerator.GenerateRouteLink(ViewContext, LinkText, DancingGoatConstants.DEFAULT_ROUTE_WITHOUT_LANGUAGE_PREFIX_NAME, null, null, null, routeValues, null);
            }

            // Ensure correct language prefix
            routeValues[WebPageRoutingOptions.LANGUAGE_ROUTE_VALUE_KEY] = LanguageName;
            return htmlGenerator.GenerateActionLink(ViewContext, LinkText, null, null, null, null, null, routeValues, null);
        }
    }
}
